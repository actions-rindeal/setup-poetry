# SPDX-FileCopyrightText:  ANNO DOMINI 2024  Jan Chren ~rindeal  <dev.rindeal gmail com>
# SPDX-License-Identifier: GPL-2.0-only OR GPL-3.0-only

name: "Setup Python and Poetry"
description: "Sets up Python and Poetry"

branding:
  color: 'blue'
  icon: 'book'

inputs:
  python-version:
    description: "Python version to set up"
    default: '3.x'
  poetry-version:
    description: "Poetry version to install"
    default: 'latest'
  pipx-packages:
    description: "pipx packages to install in addition to poetry, space separated list"
    required: false

outputs:
  cache-hit:
    description: "True if all cache steps had a cache hit, otherwise false"
    value: ${{ steps.check-all-cache-hits.outputs.all-cache-hit }}

runs:
  using: composite
  steps:
    - name: Configure pipx packages and cache paths
      id: pipx-config
      shell: python
      run: |
        import os, subprocess

        poetry_version = os.environ['POETRY_VERSION']
        packages = [f'poetry=={poetry_version}' if poetry_version != 'latest' else 'poetry']
        packages += os.environ['PACKAGES_INPUT'].split()
        cache_paths = []
        for var in ('PIPX_BIN_DIR', 'PIPX_LOCAL_VENVS'):
            dir = subprocess.getoutput(f"pipx environment --value {var}")
            for pkg in packages:
                pkg_name = pkg.split('==')[0]
                cache_paths += [ f"{dir}/{pkg_name}" ]
        
        with open(os.environ["GITHUB_OUTPUT"], 'a') as f:
            cache_paths_str = '\n'.join(cache_paths)  # FIXME: \n is invalid in ubuntu-22.04's python3.10 f-string, fix in ubuntu-24.04's python3.12
            f.write(f"CACHE-PATHS<<EOF\n\n{cache_paths_str}\nEOF\n")
            f.write(f"PIPX_PKG_SPECS={' '.join(packages)}\n")
      env:
        PACKAGES_INPUT: ${{ inputs.pipx-packages }}
        POETRY_VERSION: ${{ inputs.poetry-version }}
    
    - name: Cache pipx packages
      id: pipx-cache
      uses: actions/cache@main
      with:
        path: ${{ steps.pipx-config.outputs.CACHE-PATHS }}
        key: ${{ runner.os }}-pipx-${{ hashFiles('**/poetry.lock') }}-${{ steps.pipx-config.outputs.PIPX_PKG_SPECS }}
        restore-keys: |
          ${{ runner.os }}-pipx-${{ hashFiles('**/poetry.lock') }}-
          ${{ runner.os }}-pipx-

    - name: Install pipx packages
      if: steps.pipx-cache.outputs.cache-hit != 'true'
      shell: python
      run: |
        import os, subprocess
        cmd = ["time", "pipx", "-vvv", "install"] + os.environ['PIPX_PKG_SPECS'].split()
        print("Running command:", cmd, flush=True)
        subprocess.run(cmd, check=True)
      env:
        PIPX_PKG_SPECS: ${{ steps.pipx-config.outputs.PIPX_PKG_SPECS }}

    - name: Set up Python ${{ inputs.python-version }}
      id: python-setup
      uses: actions/setup-python@main
      with:
        python-version: ${{ inputs.python-version }}
        cache: poetry
        cache-dependency-path: |
          **/poetry.lock
          **/pyproject.toml

    - name: Check all cache hits
      id: check-all-cache-hits
      shell: python
      run: |
        import json, os

        steps_context = json.loads(os.environ['STEPS_CONTEXT'])

        def get_cache_hit(step_id):
            step_data = steps_context.get(step_id, {})
            outputs = step_data.get('outputs', {})
            return outputs.get('cache-hit', 'true').lower() == 'true'

        all_cache_hit = all(get_cache_hit(step_id) for step_id in steps_context.keys())

        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f'all-cache-hit={str(all_cache_hit).lower()}\n')

        print(f"All cache hit: {all_cache_hit}")
      env:
        STEPS_CONTEXT: ${{ toJson(steps) }}
