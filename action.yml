# SPDX-FileCopyrightText:  ANNO DOMINI 2024  Jan Chren ~rindeal  <dev.rindeal gmail com>
# SPDX-License-Identifier: GPL-2.0-only OR GPL-3.0-only

# trunk-ignore-all(yamllint/quoted-strings)

name: 'Poetry Installer'
description: 'Fast, efficient Poetry setup with caching for Python projects. Supports version specification and auto-updates.'

branding:
  color: 'blue'
  icon: 'book'

inputs:
  'poetry-version':
    description: "Poetry version to install."
    default: 'latest'

outputs:
  'poetry-version':
    description: "Installed Poetry version."
    value: >
      ${{ steps['setup'].outputs['poetry-version'] }}
  'poetry-path':
    desription: 'TODO'
    value: 'TODO'
  'cache-hit':
    description: "Whether the Poetry cache was used."
    value: >
      ${{ steps['cache'].outputs['cache-hit'] }}

runs:
  using: 'composite'
  steps:
    - id: vars
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs')
          const { execFileSync } = require('child_process')

          const execWithAnnounce = (command, args) => {
              core.debug(`Executing: ${[command, ...args].map(arg => `\`${arg}\``).join(' ')}`)
              return execFileSync(command, args, { encoding: 'utf8' }).trim()
          }

          const getPythonSiteKey = async () => {
              const [ base, site ] = await Promise.all([
                  execWithAnnounce('python3', ['-m', 'site', '--user-base']),
                  execWithAnnounce('python3', ['-m', 'site', '--user-site']),
              ])
              core.debug(`Python site.USER_BASE = \`${base}\``)
              core.debug(`Python site.USER_SITE = \`${site}\``)
              const key = site.slice(base.length)
              core.debug(`Python site key = \`${key}\``)
              return key
          }

          const getPoetryVersion = async () => {
              const inputs = JSON.parse(process.env['INPUTS'])
              const version = inputs['poetry-version']
              if ( typeof version === 'undefined' ) {
                  throw new Error(`'poetry-version' input is undefined`)
              }
              if ( version ) {
                  core.info(`Using specified Poetry version: \`${version}\``)
                  return version
              }

              core.info('Fetching latest Poetry version...')
              const latestVersion = await github.rest.repos.getLatestRelease({
                  owner: 'python-poetry',
                  repo: 'poetry'
              }).then(response => response.data.tag_name.replace(/^v/, ''))

              core.info(`Latest Poetry version: ${latestVersion}`)
              return latestVersion
          }

          const getVenvBaseDir = async () => {
              const dir = process.env['VENV_BASE_DIR']
              if ( ! fs.existsSync(dir) || ! fs.statSync(dir).isDirectory() ) {
                  throw new Error(`VENV_BASE_DIR \`${dir}\` is not a valid directory`)
              }
              try {
                  fs.accessSync(dir, fs.constants.W_OK)
              } catch (err) {
                  throw new Error(`VENV_BASE_DIR \`${dir}\` is not writable`)
              }
              return dir
          }

          const outputs = {
              'poetry-version':  await getPoetryVersion(),
              'venv-base-dir': ${await getVenvBaseDir()}/.poetry-venv`,
              'python-site-key': await getPythonSiteKey(),
          }
          for (const [key, value] of Object.entries(outputs)) {
              core.debug(`Setting output: \`${key}\` = \`${value}\``)
              core.setOutput(key, value)
          }
      env:
        INPUTS: ${{ toJSON(inputs) }}
        VENV_BASE_DIR: ${{ runner.temp }}

    - name: Cache Poetry installation
      id: poetry-venv-cache
      uses: actions/cache@main
      with:
        path: ${{ steps['vars'].outputs['venv-base-dir'] }}
        key: ${{ runner.os }}--poetry-${{ steps['vars'].outputs['poetry-version'] }}--${{ steps['vars'].outputs['python-site-key'] }}

    - name: Install Poetry
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs')
          const { execFileSync } = require('child_process')

          const steps = JSON.parse(process.env['STEPS'])
          const boolMap = {true: true, false: false}
          const inputs = {
            'venv-base-dir':      steps['vars'].outputs['venv-base-dir']?.trim(),
            'poetry-version':   steps['vars'].outputs['poetry-version']?.trim(),
            'cache-hit': boolMap[steps['poetry-venv-cache'].outputs['cache-hit']?.trim().toLowerCase()],
          }

          core.debug(`Inputs: ${JSON.stringify(inputs)}`)

          const validateInputs = () => {
            if ( typeof inputs['poetry-version'] !== 'string' || ! inputs['poetry-version'].length ) {
              throw new Error("Version must be a non-empty string")
            }
            if ( typeof inputs['cache-hit'] !== 'boolean' ) {
              throw new Error(`Invalid cache-hit value: \`${inputs['cache-hit']}\``)
            }
            if ( inputs['cache-hit'] && ( ! fs.existsSync(inputs['venv-base-dir']) || ! fs.lstatSync(inputs['venv-base-dir']).isDirectory() ) ) {
              throw new Error(`The path \`${inputs['venv-base-dir']}\` is not a directory`)
            }
          }

          const execWithAnnounce = (command, args) => {
            core.debug(`Executing: ${[command, ...args].map(arg => `\`${arg}\``).join(' ')}`)
            return execFileSync(command, args, { encoding: 'utf8' }).trim()
          }

          const installPoetry = () => {
            core.info(`Installing Poetry version ${inputs['poetry-version']}`)
            execWithAnnounce('python3', ['-m', "venv", inputs['venv-base-dir']])
            execWithAnnounce(`${inputs['venv-base-dir']}/bin/pip`, ['install', `poetry===${inputs['poetry-version']}`])
          }

          validateInputs()

          if ( ! inputs['cache-hit'] ) {
            core.info('Cache miss. Installing Poetry...')
            installPoetry()
          } else {
            core.info('Using cached Poetry installation')
          }

          core.addPath(`${inputs.venv}/bin`)
          core.info('Poetry installation complete')
      env:
        STEPS: ${{ toJSON(steps) }}
